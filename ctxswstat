#!/usr/bin/env python

import multiprocessing
from bcc import BPF
from time import sleep

BPF_SOURCE = '''
#include <linux/sched.h>

BPF_ARRAY(start_time, u64, {cpu_count});
BPF_ARRAY(acc_time, u64, {cpu_count});
BPF_ARRAY(ctxsw_cnt, u64, {cpu_count});
BPF_ARRAY(ctxsw_cnt_tmp, u64, {cpu_count});
BPF_ARRAY(ctxsw_zero_flag, u64, {cpu_count});

static void __do_count_begin(int);
static void __do_count_end(int);

static void __do_count_begin(int cpuid) {{
    u64 timestamp = bpf_ktime_get_boot_ns();
    u64* stime_ptr = start_time.lookup(&cpuid);
    u64* ctxsw_tmp_ptr = ctxsw_cnt_tmp.lookup(&cpuid);
    if(stime_ptr && ctxsw_tmp_ptr) {{
        if(*stime_ptr == 0 || (*stime_ptr != 0 && *ctxsw_tmp_ptr == 0)) {{
            *stime_ptr = timestamp;
        }} else {{
            __do_count_end(cpuid);
        }}
    }}
}}

static void __do_count_end(int cpuid) {{
    u64 timestamp = bpf_ktime_get_boot_ns();
    u64 diff;
    u64* stime_ptr = start_time.lookup(&cpuid);
    u64* ctxsw_tmp_ptr = ctxsw_cnt_tmp.lookup(&cpuid);
    u64* ctxsw_flag_ptr = ctxsw_zero_flag.lookup(&cpuid);

    if(stime_ptr && ctxsw_tmp_ptr && ctxsw_flag_ptr) {{
        if(*ctxsw_flag_ptr == 0 && *stime_ptr != 0 && *ctxsw_tmp_ptr != 0) {{
            diff = timestamp - (*stime_ptr);
            acc_time.increment(cpuid, diff);
            ctxsw_cnt.increment(cpuid, *ctxsw_tmp_ptr);
        }}
        *stime_ptr = 0;
        *ctxsw_flag_ptr = 0;
        *ctxsw_tmp_ptr = 0;
    }}
}}

static void __ctxsw_countup(int cpuid, s32 prev_tgid, s32 next_tgid) {{
    u64 zero = 0, one = 1;
    u64* stime_ptr = start_time.lookup(&cpuid);
    if(stime_ptr && *stime_ptr == 0) return;
    if(prev_tgid != 0 && next_tgid != 0) {{
        ctxsw_cnt_tmp.increment(cpuid, 1);
    }} else {{
        ctxsw_cnt_tmp.update(&cpuid, &zero);
        ctxsw_zero_flag.update(&cpuid, &one);
    }}
}}

void kprobe__schedule(struct pt_regs* ctx) {{
    __do_count_begin(bpf_get_smp_processor_id());
}}

void kretprobe__schedule(struct pt_regs* ctx) {{
    __do_count_end(bpf_get_smp_processor_id());
}}

RAW_TRACEPOINT_PROBE(sched_switch) {{
    // TP_PROTO(bool preempt, struct task_struct *prev, struct task_struct *next)
    struct task_struct *prev = (struct task_struct *)ctx->args[1];
    struct task_struct *next = (struct task_struct *)ctx->args[1];
    s32 prev_tgid, next_tgid;

    bpf_probe_read_kernel(&prev_tgid, sizeof(prev->tgid), &prev->tgid);
    bpf_probe_read_kernel(&next_tgid, sizeof(next->tgid), &next->tgid);
    __ctxsw_countup(bpf_get_smp_processor_id(), prev_tgid, next_tgid);
}}
'''

class CtxSwStat():
    def __init__(self):
        self.cpu_count = multiprocessing.cpu_count()
        self.bpf_source = BPF_SOURCE.format(cpu_count = self.cpu_count)
        self.bpf = BPF(text=self.bpf_source)
        self.prev_acc_time = [0] * self.cpu_count
        self.prev_ctxsw_cnt = [0] * self.cpu_count
        self.cur_acc_time = [0] * self.cpu_count
        self.cur_ctxsw_cnt = [0] * self.cpu_count
        self.diff_acc_time = [0] * self.cpu_count
        self.diff_ctxsw_cnt = [0] * self.cpu_count
        self.avg_ctxsw_time = [0.0] * self.cpu_count
        self.ctxsw_time_ratio = [0.0] * self.cpu_count
        self.ratio_const = 10000000 # 1/1,000,000,000 nsec * 100
        self.show_count = 0
        self.first = True

    def __collect_data(self):
        if self.first:
            for i in range(self.cpu_count):
                self.prev_acc_time[i] = self.bpf["acc_time"][i].value
                self.prev_ctxsw_cnt[i] = self.bpf["ctxsw_cnt"][i].value
            self.first = False
            return
        for i in range(self.cpu_count):
            self.cur_acc_time[i] = self.bpf["acc_time"][i].value
            self.cur_ctxsw_cnt[i] = self.bpf["ctxsw_cnt"][i].value

    def __calc_diff_and_avg(self):
        for i in range(self.cpu_count):
            self.diff_acc_time[i]  = self.cur_acc_time[i] - self.prev_acc_time[i]
            self.diff_ctxsw_cnt[i] = self.cur_ctxsw_cnt[i] - self.prev_ctxsw_cnt[i]
            if self.diff_ctxsw_cnt[i] != 0:
                self.avg_ctxsw_time[i] = self.diff_acc_time[i] / self.diff_ctxsw_cnt[i]
                self.ctxsw_time_ratio[i] = self.avg_ctxsw_time[i] / self.ratio_const
            else:
                self.avg_ctxsw_time[i] = 0
                self.ctxsw_time_ratio[i] = 0

    def __prepare_next(self):
        for i in range(self.cpu_count):
            self.prev_acc_time[i] = self.cur_acc_time[i]
            self.prev_ctxsw_cnt[i] = self.cur_ctxsw_cnt[i]

    def __print_header(self):
        print("time of context switch [unit:nsec]")
        header = "count      "
        if self.cpu_count >= 100:
            cpu_pattern = "cpu{:<3d}     "
        else:
            cpu_pattern = "cpu{:<2d}      "
        header = header + cpu_pattern * self.cpu_count
        print(header.format(*list(range(1, self.cpu_count+1))))

    def __print_stat(self):
        line = "{:<5d} "
        each_cpu_f = "{:<10.2f} " * self.cpu_count
        each_cpu_d = "{:<10d} " * self.cpu_count
        line_f = each_cpu_f
        line_d = each_cpu_d
        print((line+"cnt:").format(self.show_count), line_d.format(*self.diff_ctxsw_cnt))
        print((line+"tot:").format(self.show_count), line_d.format(*self.diff_acc_time))
        print((line+"avg:").format(self.show_count), line_f.format(*self.avg_ctxsw_time))
        print((line+"  %:").format(self.show_count), line_f.format(*self.ctxsw_time_ratio))

    def show_stat(self):
        self.show_count += 1
        if self.first:
            self.__print_header()
            self.__collect_data()
        else:
            self.__collect_data()
            self.__calc_diff_and_avg()
            self.__print_stat()
            self.__prepare_next()


def main():
    ctxswstat = CtxSwStat()
    while True:
        try:
            sleep(1)
        except KeyboardInterrupt:
            break
        ctxswstat.show_stat()


if __name__ == "__main__":
    main()


